//std::vector<Coordinates> CellFinder::BFS(Coordinates coord, bool agentCheck, bool levelTwo);

Festure: The function uses Breadth First Search algorithm customized to return a vector of coordinates of all the empty or 
  agent-occupied cells(if agentCheck = true,empty cells when false). The vector includes all the 12 cells within 2 positions
  distance (if levelTwo = true, 1 position distance when false) of the given coordinate, coord. The traversal is perfomed in 
  grid which is a vector<vector<Agent*>> where Agent* is a pointer to class Agent, the base class representing the players of 
  the simulation (coyote and roadrunner).  
  
  ALGORITHM:
  
  1. Declare std::vector<std::vector<bool>> visited, representing the each coordinates of the grid to mark whether each position if 
    it is already visited or not.
  2. Set visited[x][y] = false, where 0<=x<=maxRow and 0<=y<=maxColumn.
  3. Set visited[coord.row][coord.col] = true
  4. Declare std::queue <Coordinates> queueList, as a list of the coordinates pushed to be pushed into the queue
  5. while(the list is not empty )
    5.1. Get the first element of the vector as current coordinate and pop from the list
    5.2. Calculate the up,down,left and right position from current coordinate.
    5.3. For each of the four position
      5.3.1. Validate the position, whether the position is out of bound and/or already visited.
      5.3.2. if levelTwo is true push the position into the list
      5.3.3. Add the empty position to the vector when agentCheck is false.
      5.3.4. Add the agent position(add roadrunner coordinates for given coyote and vise-versa) 
              to the vector when agentCheck is true.
    
